;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Problem 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; IMPORTANT:
; 1. The functions that you design for this problem *must* use the ISL list
;    abstraction(s); you MAY NOT use recursion: doing so will lead you to get
;    no code credit for the function :(
;
; 2. The planning part of this problem is in the SAME file used for ALL parts
;    of Homework 8.


; Recall Homework 6, where you designed a function to help bookstores - you
; are now going to solve the same problem, but this time using ISL list
; abstractions.

; As before, assume that bookstores keep all authors whose last name starts
; with the same letter on the same shelf, and those shelves are labeled with
; that letter. A record of which authors are on a given shelf would be
; represented using the following data definitions:


(define-struct shelf [letter authors])

; A Shelf is a (make-shelf 1String [List-of String])
; Interpretation: a record of the letter the authors' last name *should* start
; with, and the list of the *actual* last names on the shelf.

(define SHELF-1 (make-shelf "A" (list "Austen" "Hurston" "Angelou" "Butler" "Alvarez")))
(define SHELF-2 (make-shelf "B" (list)))
(define SHELF-3 (make-shelf "C" (list "Carle" "Coates")))

(define (shelf-temp s)
  (... (shelf-letter s) ...
       (list-of-string-temp (shelf-authors s)) ...))


; As before, your task will be to design the function fix-shelves, which takes
; a list of Shelf records and produces a list of Shelf records where at least
; one author does not belong on the Shelf. The output Shelf records should
; only contain the authors who don't belong on that shelf. Shelf records and
; the authors within those records should be in the same order in the output
; as they appear in the input. Do not generate empty Shelf records; this
; generates needlessly long reports, which annoys the employees.


; TODO 1/2: Plan your solution, using the planning interface described on the
;           canvas page for this assignment. ALL PLANNING FOR THIS HW WILL BE
;           DONE IN THE SAME PLACE, AND SUBMITTED TOGETHER.

; TODO 2/2: Design the function fix-shelves using the ISL list abstractions.
;           You have been supplied a test for clarity (which you can use in
;           your design, but should supplement). YOUR CODE SHOULD NOT USE ANY
;           RECURSION.

#|
(check-expect (fix-shelves (list SHELF-1 SHELF-2 SHELF-3))
              (list (make-shelf "A" (list "Hurston" "Butler"))))
|#


; A ListofShelfRecords (LoSR) is one of:
; - '()
; - (cons Shelf LoSR)
; Interpretation : A list of shelf records

(define LOSR-0 '())
(define LOSR-1 (cons SHELF-1 LOSR-0))
(define LOSR-2 (cons SHELF-2 LOSR-1))
(define LOSR-3 (cons SHELF-3 LOSR-2))


(define (losr-temp losr)
  (...
   (cond
     [(empty? losr) ...]
     [(cons? losr) ...
      (shelf-temp (first losr)) ...
      (losr-temp (rest losr)) ...])))

; fix-shelves : [List-of Shelf] -> [List-of Shelf]
; creates a shelf containing only the authors who don't belong on given shelf

(check-expect (fix-shelves (list SHELF-1 SHELF-2 SHELF-3))
              (list (make-shelf "A" (list "Hurston" "Butler"))))
(check-expect (fix-shelves (list SHELF-1 SHELF-2 SHELF-3 SHELF-4))
              (list (make-shelf "A" (list "Hurston" "Butler"))
                    (make-shelf "X" (list "Tube" "Bandage"))))
(check-expect (fix-shelves (list SHELF-2 SHELF-3))
              (list))

(define (fix-shelves losr)
  (local [; belong? : 1String String ->  Boolean
          ; compares the given letter and checks if
          ; the first letter of the name matches 
          ; (check-expect (belong? "A" "Anne") #false)
          ; (check-expect (belong? "B" "Maia") #true)
          (define (belong? 1s str)
            (not (string=? 1s (substring str 0 1))))
          ; fix-list : Shelf -> Shelf
          ; keeps only the author names that don't belong
          ; (check-expect (fix-list SHELF-1) (make-shelf "A" (list "Hurston" "Butler"))
          ; (check-expect (fix-list SHELF-4) (make-shelf "X" (list "Tube" "Bandage"))
          (define (fix-list sh)
            (make-shelf (shelf-letter sh)
                        (filter (λ (x) (belong? (shelf-letter sh) x))
                                (shelf-authors sh))))]
(filter (λ (shelf) (not (empty? (shelf-authors shelf)))) (map fix-list losr))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Problem 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; IMPORTANT:
; 1. The functions that you design for this problem *must* use the ISL list
;    abstraction(s); you MAY NOT use recursion: doing so will lead you to get
;    no code credit for the function :(
;
; 2. The planning part of this problem is in the SAME file used for ALL parts
;    of Homework 8.


; Your task here will be to design the function elim-contains-char, which takes
; a list of strings and produces a list of the same strings, in the same order,
; but excluding those strings that contain a supplied character (represented as
; a 1String). For clarity, here is the intended signature:


; Note: For purposes of this problem, you should NOT use string-contains? (or
;       similar). Instead, use the explode function to treat the supplied
;       string as a list of characters (each represented as a 1String).


; TODO 1/2: Plan your solution, using the planning interface described on the
;           canvas page for this assignment. ALL PLANNING FOR THIS HW WILL BE
;           DONE IN THE SAME PLACE, AND SUBMITTED TOGETHER.

; TODO 2/2: Design the function elim-contains-char using the ISL list
;           abstractions. YOUR CODE SHOULD NOT USE ANY RECURSION.

; elim-contains-char : 1String [List-of String] -> [List-of String]
; Takes in a letter and list of strings and removes and produces 
; a new list of strings that contain the letter from the list

(check-expect (elim-contains-char "a" (list "hello" "there" "wow"))
              (list "hello" "there" "wow"))

(check-expect (elim-contains-char "a" '()) '())

(check-expect (elim-contains-char "a" (list "i" "love" "animals"))
              (list "i" "love"))

(check-expect (elim-contains-char "B" (list "better" "before" "believe"))
              '())

(check-expect (elim-contains-char "c" (list "CAME" "HERE" "FOR" "CHARITY"))
              (list "HERE" "FOR"))

(define (elim-contains-char letter los)
  (local [; let-in-string? 1String String -> Boolean
          ; Takes in a letter and string
          ; returns #true if the letter is within the string
          ; returns #false is the letter is not within the string
          ; (check-expect (let-in-string? "a" "hello") #false)
          ; (check-expect (let-in-string? "B" "before") #true)
          ; (check-expect (let-in-string? "c" "before") #false)
          (define (let-in-string? str)
            (not (ormap (λ (s) (string=? (string-downcase letter) s))
                        (explode (string-downcase str)))))]
    (filter let-in-string? los)))
   


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Problem 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; IMPORTANT:
; 1. The functions that you design for this problem *must* use the ISL list
;    abstraction(s); you MAY NOT use recursion: doing so will lead you to get
;    no code credit for the function :(
;
; 2. The planning part of this problem is in the SAME file used for ALL parts
;    of Homework 8.


; Your task in this problem is to help fishing boat skippers adhere to strict
; rules about fishing in the United States. In particular, catching and keeping
; a fish that is below a certain size can result in a hefty fine. However, these
; rules don't apply to any fish designed as an "invasive species." (In fact, in
; many locations, the act of releasing these fish back into the wild carries its
; own fine!)

; For a fishing boat skipper to know that they are following the above rules for
; fish to release, they must keep track their fish and at every point in time on
; the trip, they need to be able to determine which non-invasive fish in their
; catch are above the minimum size restriction (we'll use 8 inches). For this
; purpose, a catch is represented with the following data definition:


(define-struct fish [species length-in-inches])

; A Fish is a (make-fish String PosNum)
; Interpretation: name of fish and length in inches.

(define FISH-1 (make-fish "Carp" 20))
(define FISH-2 (make-fish "Guppy" 1))
(define FISH-3 (make-fish "Lake Trout" 8))
(define FISH-4 (make-fish "Snakehead" 10))

(define (fish-temp f)
  (... (fish-species f) ...
       (fish-length-in-inches f) ...))

; An InvasiveSpecies is one of:
; - "invasive"
; - "non-invasive"
; Interpretation: invasive species of fish


; Your task is to design the function viable-fish, which takes in a list of
; caught fish and a list of names of invasive species (represented as strings)
; and returns a list, in the same order as the input, of the non-invasive fish
; that are larger than 8 inches.


; TODO 1/2: Plan your solution, using the planning interface described on the
;           canvas page for this assignment. ALL PLANNING FOR THIS HW WILL BE
;           DONE IN THE SAME PLACE, AND SUBMITTED TOGETHER.

; TODO 2/2: Design the function viable-fish using the ISL list abstractions.
;           YOUR CODE SHOULD NOT USE ANY RECURSION.

; viable-fish : [List-of String] [List-of String] : [List-of String]
; takes in a list of caught fish and a list of names of invasive species
; and returns a list of non-invasive fish that are larger than 8 inches 

(check-expect (viable-fish ALL-FISH (list "Guppy" "Lake Trout")) (list "Carp" "Snakehead"))
(check-expect (viable-fish NON-INVASIVE-FISH '()) (list "Carp" "Snakehead"))
(check-expect (viable-fish INVASIVE-FISH (list "Guppy" "Lake Trout")) '())

(define ALL-FISH (list "Carp" "Guppy" "Lake Trout" "Snakehead"))
(define NON-INVASIVE-FISH (list "Carp" "Snakehead"))
(define INVASIVE-FISH (list "Guppy" "Lake Trout"))

;filtering, ormap
; locf = list of caught fish
; lois = list of invasive species

(define (viable-fish locf lois)
  (local [; >8? : Fish -> Boolean
          ; takes in a Fish and returns
          ; #true if fish length is larger than 8 inches
          ; #false if fish length shorter than 8 inches
          ; (check-expect (>8? FISH-1) #true)
          ; (check-expect (>8? FISH-2) #false)
          ; (check-expect (>8? FISH-3) #false)
          (define (>8? f)
            (> (fish-length-in-inches f) 8))
          ; invasive :  -> [List-of Fish]
          (define (invasive f)
            (ormap (λ (x) (or (string=? (fish-species f) x) (>8? (fish-length-in-inches x)))) locf))]
    (filter invasive lois)))
