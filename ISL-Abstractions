(require 2htdp/image)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Problem 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This problem asks you to design several functions that employ the
; following data definitions. The functions that you design *must* use
; list abstraction(s) when appropriate; you MAY NOT use recursion: doing
; so will lead you to get no code credit for the function :(
;
; NOTE #1: Part of the credit for each problem will be based on the choice
; of list abstractions, so make sure that they are a good match for the
; problem.
;
; NOTE #2: For certain problems, you will have to design helper functions
; that do not use list abstractions. You should follow the full design
; recipe (including appropriate use of templates) for all problems. Be sure
; to do this, even if it feels a bit tedious - listen to your templates!!
;
; Data Definitions (do not modify these)


; A Weekday is one of:
; - "Monday"
; - "Tuesday"
; - "Wednesday"
; - "Thursday"
; - "Friday"
; Interpretation: a day that excludes the weekend

(define WEEKDAY-M "Monday")
(define WEEKDAY-T "Tuesday")
(define WEEKDAY-W "Wednesday")
(define WEEKDAY-R "Thursday")
(define WEEKDAY-F "Friday")

(define (weekday-temp w)
  (...
   (cond
     [(string=? w WEEKDAY-M) ...]
     [(string=? w WEEKDAY-T) ...]
     [(string=? w WEEKDAY-W) ...]
     [(string=? w WEEKDAY-R) ...]
     [(string=? w WEEKDAY-F) ...])))


(define-struct meeting [day bname rnum hstart mstart duration])

; A ClassMeeting is a (make-meeting Weekday String String PosInt[8, 18] NonNegInt[0, 59] PosInt)
; Interpretation: when a class is scheduled to meet weekly
; - day: which day of the week
; - bname: name of the building
; - rnum: room number
; - hstart: starting hour (24hr)
; - mstart: starting minute
; - duration: length of the class (in minutes)

(define CM-FUNDIES-M (make-meeting WEEKDAY-M "WVH" "210A" 10 30 65))
(define CM-FUNDIES-W (make-meeting WEEKDAY-W "WVH" "210A" 10 30 65))
(define CM-FUNDIES-R (make-meeting WEEKDAY-R "WVH" "210A" 10 30 65))
;
(define CM-FUNDIES-LAB (make-meeting WEEKDAY-T "WVH" "212" 8 0 100))
;
(define CM-DISCRETE-T (make-meeting WEEKDAY-T "ISEC" "102" 13 35 100))
(define CM-DISCRETE-F (make-meeting WEEKDAY-F "ISEC" "102" 13 35 100))
;
(define CM-DISCRETE-SEM (make-meeting WEEKDAY-W "Hastings" "110" 16 35 65))
;
(define CM-CREATURES-T (make-meeting WEEKDAY-T "Forbidden Forest" "Hut" 13 0 200))
(define CM-POTIONS-R (make-meeting WEEKDAY-R "Hogwarts" "Dungeon" 13 0 200))

(define (classmeeting-temp cm)
  (... (weekday-temp (meeting-day cm)) ...
       (meeting-bname cm) ...
       (meeting-rnum cm) ...
       (meeting-hstart cm) ...
       (meeting-mstart cm) ...
       (meeting-duration cm) ...))


(define-struct course [prefix num name prof meetings])

; A Course is a (make-course String String String String [List-of ClassMeeting])
; Interpretation: a weekly class
; - prefix: the course prefix
; - num: the course number
; - name: the course name
; - prof: name of the professor
; - meetings: weekly meeting times

(define COURSE-EASY-A
  (make-course "SCHED" "101" "Easy A" "Lazy"
               '()))

(define COURSE-FUNDIES-LECTURE
  (make-course "CS" "2500" "Fundies" "Howdy"
               (list CM-FUNDIES-M CM-FUNDIES-W CM-FUNDIES-R)))

(define COURSE-FUNDIES-LAB
  (make-course "CS" "2501" "Fundies Lab" "Awesome TAs"
               (list CM-FUNDIES-LAB)))

(define COURSE-DISCRETE-LECTURE
  (make-course "CS" "1800" "Discrete Structures" "Dr Strange"
               (list CM-DISCRETE-T CM-DISCRETE-F)))

(define COURSE-DISCRETE-SEM
  (make-course "CS" "1802" "Seminar for CS 1800" "Park"
               (list CM-DISCRETE-SEM)))

(define COURSE-CREATURES
  (make-course "HPTR" "2000" "Care of Magical Creatures" "Hagrid"
               (list CM-CREATURES-T)))

(define COURSE-POTIONS
  (make-course "HPTR" "2650" "Potions" "Snape"
               (list CM-POTIONS-R)))

(define (course-temp c)
  (... (course-prefix c) ...
       (course-num c) ...
       (course-name c) ...
       (course-prof c) ...
       (locm-temp (course-meetings c)) ...))


; A CourseSchedule is a [List-of Course]
; Interpretation: a list of weekly courses!

(define SCHEDULE-OOPS '())

(define SCHEDULE-KHOURY
  (list COURSE-FUNDIES-LECTURE
        COURSE-FUNDIES-LAB
        COURSE-DISCRETE-LECTURE
        COURSE-DISCRETE-SEM))

(define SCHEDULE-MAGIC
  (list COURSE-CREATURES
        COURSE-POTIONS))

(define SCHEDULE-CS+MAGIC
  (list COURSE-FUNDIES-LECTURE
        COURSE-FUNDIES-LAB
        COURSE-CREATURES
        COURSE-POTIONS))


; TODO 1/8: Part of healthy course scheduling is making sure to build in time for
;           food, and so you are to design the function lunch-course that produces
;           a "Lunch" course!
;
;           The function should take in a prefix & number (e.g., "FOOD" "101"),
;           a name & professor (e.g., "Exciting Baking" with "Alderton"), as
;           well as a list of weekdays. The function will then makes sure that
;           dÃ©jeuner occurs on all of those days at noon (for one hour) in a
;           single location of your choice (e.g., Hogwarts Great Hall).
;
;           Note: make sure to test your function on at least two sets of inputs!

; lunch-course : Prefix Number Name Professor [List-of Weekday]-> Course 
; Creates a lunch course based on prefix, number, name, professor, and weekday
(check-expect (lunch-course "FOOD" 101 "Exciting Baking" "Alderton" (list WEEKDAY-M))
              (make-course "FOOD" 101 "Exciting Baking" "Alderton"
                           (list (make-meeting "Monday" "Dining hall" "101" 12 0 60))))

(check-expect (lunch-course "FOOD-2" 202 "Even-More-Exciting Baking" "Brown" (list WEEKDAY-T WEEKDAY-W))
              (make-course "FOOD-2" 202 "Even-More-Exciting Baking" "Brown"
                           (list (make-meeting "Tuesday" "Dining hall" "101" 12 0 60)
                                 (make-meeting "Wednesday" "Dining hall" "101" 12 0 60))))

(check-expect (lunch-course "FOOD-3" 202 "The Great British Bake Off" "Ramsey" (list WEEKDAY-R WEEKDAY-F))
              (make-course "FOOD-3" 202 "The Great British Bake Off" "Ramsey"
                           (list (make-meeting "Thursday" "Dining hall" "101" 12 0 60)
                                 (make-meeting "Friday" "Dining hall" "101" 12 0 60)))) 

(define (lunch-course pre num name prof low)
  (make-course pre num name prof (map lunch-meeting low)))

; lunch-meeting : Weekday -> ClassMeeting
; Takes a weekday and creates a lunch meeting
(check-expect (lunch-meeting WEEKDAY-M) (make-meeting "Monday" "Dining hall" "101" 12 0 60))
(check-expect (lunch-meeting WEEKDAY-T) (make-meeting "Tuesday" "Dining hall" "101" 12 0 60))
(check-expect (lunch-meeting WEEKDAY-R) (make-meeting "Thursday" "Dining hall" "101" 12 0 60))

(define (lunch-meeting day)
  (make-meeting day "Dining hall" "101" 12 0 60))

; TODO 2/8: Design the function long-weekend? that determines if a
;           course schedule avoids all classes on Mondays & Fridays.
;           In the examples above, this is true of OOPS and MAGIC.
;           Note: make sure to follow all the templates and
;           sufficiently test all your functions!

; long-weekend? : [List-of Course] -> Boolean
; returns #true if the course schedule does not
; have meetings on Mondays and Fridays

(check-expect (long-weekend? SCHEDULE-OOPS) #true)
(check-expect (long-weekend? SCHEDULE-KHOURY) #false)
(check-expect (long-weekend? SCHEDULE-MAGIC) #true)
(check-expect (long-weekend? SCHEDULE-CS+MAGIC) #false)

(define (long-weekend? loc)
  (andmap mon/fri? loc))

; Mon/Fri? : Course -> Boolean
; returns #true if the course does not occur on Monday or Friday

(check-expect (mon/fri? COURSE-EASY-A) #true)
(check-expect (mon/fri? COURSE-FUNDIES-LECTURE) #false)
(check-expect (mon/fri? COURSE-FUNDIES-LAB) #true)
(check-expect (mon/fri? COURSE-DISCRETE-LECTURE) #false) 
(check-expect (mon/fri? COURSE-DISCRETE-SEM) #true)
(check-expect (mon/fri? COURSE-CREATURES) #true)
(check-expect (mon/fri? COURSE-POTIONS) #true)

(define (mon/fri? c)
  (or (meeting-on-mon/fri? (course-meetings c))
      (meeting-on-mon/fri? (course-meetings c))))

; meeting-on-mon/fri? : [List-of ClassMeeting] -> Boolean
; returns #true if the meeting doesn't occur on Monday and Friday

(check-expect (meeting-on-mon/fri? (list CM-FUNDIES-M CM-FUNDIES-W CM-FUNDIES-R)) #false)
(check-expect (meeting-on-mon/fri? (list CM-FUNDIES-LAB)) #true)
(check-expect (meeting-on-mon/fri? (list CM-DISCRETE-T CM-DISCRETE-F)) #false)

(define (meeting-on-mon/fri? locm)
  (andmap is-it-on-m/f? locm))

; is-it-on-m/f? : ClassMeeting -> Boolean
; returns #true if does not meet on Mondays or Fridays

(check-expect (is-it-on-m/f? CM-FUNDIES-M) #false)
(check-expect (is-it-on-m/f? CM-FUNDIES-W) #true)
(check-expect (is-it-on-m/f? CM-FUNDIES-R) #true) 

(define (is-it-on-m/f? cm)
  (not (or (string=? (meeting-day cm) WEEKDAY-M)
           (string=? (meeting-day cm) WEEKDAY-F)))) 


; TODO 3/8: Design the function only-khoury that takes a course schedule
;           and produces a new schedule only containing classes that
;           have the prefix "CS", "DS", or "CY". So supplying OOPS and
;           KHOURY would result in unaffected schedules, but MAGIC would
;           result in an empty schedule and CS+MAGIC would result in a
;           schedule with only Fundies :)
;
;           Note: since we didn't include any DS/CY courses in the
;           examples, make may need to create example courses to properly
;           test your helper function(s)! Some course suggestions include
;           DS2000 (Programming with Data) and CY2550 (Foundations of
;           Cybersecurity).

; only-khoury : CourseSchedule -> CourseSchedule
; Takes a course schedule and produces new schedule
; containing only Khoury prefixes

(check-expect (only-khoury SCHEDULE-KHOURY)
              (list COURSE-FUNDIES-LECTURE
                    COURSE-FUNDIES-LAB
                    COURSE-DISCRETE-LECTURE
                    COURSE-DISCRETE-SEM))

(check-expect (only-khoury SCHEDULE-CS+MAGIC)
              (list COURSE-FUNDIES-LECTURE
                    COURSE-FUNDIES-LAB))

(check-expect (only-khoury SCHEDULE-OOPS)
              '())

(define (only-khoury cs)
  (filter prefix? cs))

; prefix? : Course -> Boolean
; takes in a course and determines whether there are khoury courses
(check-expect (prefix? COURSE-FUNDIES-LECTURE) #t)
(check-expect (prefix? COURSE-CREATURES) #f)
(check-expect (prefix? COURSE-DISCRETE-LECTURE) #t)

(define (prefix? c)
  (or (string=? "CS" (course-prefix c))
      (string=? "DS" (course-prefix c))
      (string=? "CY" (course-prefix c))))

; TODO 4/8: Design the function time-in-class that calculates total
;           time spent in class (in minutes each week) for a supplied
;           course schedule. For example, OOPS requires 0 minutes and
;           KHOURY is 560.

; time-in-class : CourseSchedule -> PosInt
; Take a course schedule and calculates total time spent in class
(check-expect (time-in-class SCHEDULE-OOPS) 0)
(check-expect (time-in-class SCHEDULE-KHOURY) 560)
(check-expect (time-in-class SCHEDULE-MAGIC) 400)
(check-expect (time-in-class SCHEDULE-CS+MAGIC) 695)
              
(define (time-in-class cm)
  (foldr + 0 (map class-time cm)))

; course-times : Course -> PosInt
; Takes a list of class meetings and returns total duration
(check-expect (class-time COURSE-FUNDIES-LECTURE) 195)
(check-expect (class-time COURSE-FUNDIES-LAB) 100)
(check-expect (class-time COURSE-DISCRETE-LECTURE) 200)
  
(define (class-time locm)
  (foldr + 0 (map meeting-duration (course-meetings locm))))

        
; TODO 5/8: Design the function bring-water? that takes a course schedule
;           and determines if any course has even a single meeting that
;           lasts for longer than two hours. For example, this is true
;           for either of the magic schedules, but none of the others.

; bring-water? : CourseSchedule -> Boolean
; Takes a course schedule and determines if any course
; has a single meeting that lasts longer than two hours

(check-expect (bring-water? SCHEDULE-OOPS) #false)
(check-expect (bring-water? SCHEDULE-KHOURY) #false)
(check-expect (bring-water? SCHEDULE-MAGIC) #true)
(check-expect (bring-water? SCHEDULE-CS+MAGIC) #true)

(define (bring-water? cs)
  (ormap >two-hours? cs))

; >two-hours? : Course -> Boolean
; Checks if any meeting last for longer than two hours
(check-expect (>two-hours? COURSE-FUNDIES-LECTURE) #false)
(check-expect (>two-hours? COURSE-POTIONS) #true)
(check-expect (>two-hours? COURSE-CREATURES) #true)

(define (>two-hours? c)
  (ormap meet-over-120? (course-meetings c)))
                        
; meet-over-120? : ClassMeeting -> Boolean
; Checks if a ClassMeeting is over 120 minutes long
(check-expect (meet-over-120? CM-FUNDIES-M) #f)
(check-expect (meet-over-120? CM-POTIONS-R) #t)
(check-expect (meet-over-120? CM-FUNDIES-LAB) #f)

(define (meet-over-120? m)
  (> (meeting-duration m) 120))


; TODO 6/8: Design the function course->days-abbrev that takes a course
;           and produces a single string that has abbreviations of all
;           days of the week that course meets. For instance, Fundies
;           lecture would produce "MWR", Fundies lab would produce "T",
;           Discrete lecture would be "TF", and the "easy A" class would
;           produce "" (since the lazy prof never wants to meet!).

; course->days-abrev : Course -> String
; Takes a course and produces abbreviations of
; all days of the week that course meets
(check-expect (course->days-abrev COURSE-FUNDIES-LECTURE) "MWR")
(check-expect (course->days-abrev COURSE-DISCRETE-LECTURE) "TF")
(check-expect (course->days-abrev COURSE-FUNDIES-LAB) "T")

(define (course->days-abrev c)
  (foldr string-append "" (map days-abrev (course-meetings c))))

; days-abrev-list : [List-of ClassMeeting] -> [List-of String]
; Takes in a list of class meetings and produces
; a list of abbreviations of meeting days
(check-expect (days-abrev-list (list CM-FUNDIES-M CM-FUNDIES-W CM-FUNDIES-R)) (list "M" "W" "R"))
(check-expect (days-abrev-list (list CM-DISCRETE-T CM-DISCRETE-F)) (list "T" "F"))
(check-expect (days-abrev-list (list CM-CREATURES-T CM-POTIONS-R)) (list "T" "R"))

(define (days-abrev-list locm)
  (map days-abrev locm))

; days-abrev : ClassMeeting -> String
; Takes in a class meetings and produces an abbreviation of meeting day
(check-expect (days-abrev CM-FUNDIES-M) "M")
(check-expect (days-abrev CM-FUNDIES-LAB) "T")
(check-expect (days-abrev CM-FUNDIES-W) "W")
(check-expect (days-abrev CM-FUNDIES-R) "R")
(check-expect (days-abrev CM-DISCRETE-F) "F")

(define (days-abrev m)
  (cond
    [(string=? (meeting-day m) WEEKDAY-M) "M"]
    [(string=? (meeting-day m) WEEKDAY-T) "T"]
    [(string=? (meeting-day m) WEEKDAY-W) "W"]
    [(string=? (meeting-day m) WEEKDAY-R) "R"]
    [(string=? (meeting-day m) WEEKDAY-F) "F"]))

; TODO 7/8: Design the functions stack/h and stack/v, to stack a supplied
;           list of images horizontally and vertically, with a bit of buffer
;           between each image (see the GAP we've defined for you). You have
;           been supplied tests for clarity.

(define GAP (square 5 "solid" "white"))

; place-gap-h : Image -> Image
; places a gap before an image
(check-expect (place-gap-h (text "A" 5 "black"))
              (beside GAP (text "A" 5 "black")))

(check-expect (place-gap-h (text "B" 10 "black"))
              (beside GAP (text "B" 10 "black")))

(check-expect (place-gap-h (text "C" 50 "black"))
              (beside GAP (text "C" 50 "black")))

(define (place-gap-h i)
  (beside GAP i))

; stack/h : [List-of-Images] -> Image
; Stacks supplied list of images horizontally with gaps in between
(check-expect
 (stack/h '())
 GAP)

(check-expect
 (stack/h
  (list
   (text "A" 5 "black")
   (text "B" 10 "black")
   (text "C" 50 "black")))
 (beside
  GAP
  (text "A" 5 "black")
  GAP
  (text "B" 10 "black")
  GAP
  (text "C" 50 "black")
  GAP))

(check-expect
 (stack/h
  (list
   (text "Hello" 20 "black")
   (text "World" 30 "black")
   (text ":)" 50 "black")))
 (beside
  GAP
  (text "Hello" 20 "black")
  GAP
  (text "World" 30 "black")
  GAP
  (text ":)" 50 "black")
  GAP))

(define (stack/h loi)
  (cond
    [(empty? loi) GAP]
    [(cons? loi) (foldr beside GAP (map place-gap-h loi))]))

; place-gap-v : Image -> Image
; places a gap before an image
(check-expect (place-gap-v (text "A" 5 "black"))
              (above GAP (text "A" 5 "black")))

(check-expect (place-gap-v (text "B" 10 "black"))
              (above GAP (text "B" 10 "black")))

(check-expect (place-gap-v (text "C" 50 "black"))
              (above GAP (text "C" 50 "black")))

(define (place-gap-v i)
  (above GAP i))


; stack/v : [List-of-Images] -> Image
; Stack supplied list of images vertically with gaps in between

(check-expect
 (stack/v '())
 GAP)

(check-expect
 (stack/v
  (list
   (text "A" 5 "black")
   (text "B" 10 "black")
   (text "C" 50 "black")))
 (above
  GAP
  (text "A" 5 "black")
  GAP
  (text "B" 10 "black")
  GAP
  (text "C" 50 "black")
  GAP))

(check-expect
 (stack/v
  (list
   (text "Hello" 20 "black")
   (text "World" 30 "black")
   (text ":)" 50 "black")))
 (above
  GAP
  (text "Hello" 20 "black")
  GAP
  (text "World" 30 "black")
  GAP
  (text ":)" 50 "black")
  GAP))

(define (stack/v loi)
  (cond
    [(empty? loi) GAP]
    [(cons? loi) (foldr above GAP (map place-gap-v loi))]))


; TODO 8/8: Now using your solutions to the previous two parts, design the
;           function viz-schedule, which produces a visual representation
;           of a supplied course schedule, such that each course is a row
;           (with the prefix, num, name, prof, and day abbreviations) and
;           the rows are vertically stacked. You have been supplied tests
;           for clarity.


; viz-schedule : CourseSchedule -> Image
; Produces a visual representation of a supplied course schedule


(check-expect (viz-schedule SCHEDULE-OOPS) GAP)

(check-expect (viz-schedule SCHEDULE-KHOURY)
              (above GAP
                     (text "CS 2500 (Fundies, Howdy): MWR" 50 "black")
                     GAP
                     (text "CS 2501 (Fundies Lab, Awesome TAs): T" 50 "black")
                     GAP
                     (text "CS 1800 (Discrete Structures, Dr Strange): TF" 50 "black")
                     GAP
                     (text "CS 1802 (Seminar for CS 1800, Park): W" 50 "black")
                     GAP))

(check-expect (viz-schedule SCHEDULE-MAGIC)
              (above GAP
                     (text "HPTR 2000 (Care of Magical Creatures, Hagrid): T" 50 "black")
                     GAP
                     (text "HPTR 2650 (Potions, Snape): R" 50 "black")
                     GAP))

(define (viz-schedule cs)
  (stack/v (list-of-rows cs)))

; list-of-rows : CourseSchedule -> Image
; Makes a list of rows of courses
(check-expect (list-of-rows SCHEDULE-OOPS) '())

(check-expect (list-of-rows SCHEDULE-MAGIC) (list (text "HPTR 2000 (Care of Magical Creatures, Hagrid): T" 50 "black")
                                                  (text "HPTR 2650 (Potions, Snape): R" 50 "black")))

(check-expect (list-of-rows SCHEDULE-KHOURY) (list (text "CS 2500 (Fundies, Howdy): MWR" 50 "black")
                                                   (text "CS 2501 (Fundies Lab, Awesome TAs): T" 50 "black")
                                                   (text "CS 1800 (Discrete Structures, Dr Strange): TF" 50 "black")
                                                   (text "CS 1802 (Seminar for CS 1800, Park): W" 50 "black")))

(define (list-of-rows cs)
  (map row-image cs))

; row-image : Course -> Image
; Produces a row of a course
(check-expect (row-image COURSE-FUNDIES-LECTURE) (text "CS 2500 (Fundies, Howdy): MWR" 50 "black"))
(check-expect (row-image COURSE-CREATURES) (text "HPTR 2000 (Care of Magical Creatures, Hagrid): T" 50 "black"))
(check-expect (row-image COURSE-DISCRETE-LECTURE) (text "CS 1800 (Discrete Structures, Dr Strange): TF" 50 "black"))

(define (row-image c)
  (text (row-text c) 50 "black"))

; row-text : Course -> String
; Produces the text of a course
(check-expect (row-text COURSE-FUNDIES-LECTURE) "CS 2500 (Fundies, Howdy): MWR")
(check-expect (row-text COURSE-CREATURES) "HPTR 2000 (Care of Magical Creatures, Hagrid): T")
(check-expect (row-text COURSE-DISCRETE-LECTURE) "CS 1800 (Discrete Structures, Dr Strange): TF")

(define (row-text c)
  (string-append (course-prefix c) " "
                 (course-num c) " " "("
                 (course-name c) ", "
                 (course-prof c) "): "
                 (course->days-abrev c)))

